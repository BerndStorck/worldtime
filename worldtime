#! /bin/bash
#
# worldtime 1.2.2, 2020-09-17
#
# Shows the local time of one user seleced town from a list of seleced
# towns all over the world.
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#

PROG_NAME="worldtime"
PROG_VERSION="1.2.2"
SCRIPT_NAME="$(basename "$0")"  # is defined for the case the user has renamed the script file.
ZONES_FILE="/usr/local/share/timezones"  # Contains sets like "New York:America/New_York".

if ! which reformat &> /dev/null; then
	echo "reformat will be installed…"
	sudo apt-get -qq install reformat
fi

if [ "${LANG::2}" == "de" ]; then  # sets a flag variable for the user interface language.
    UILANG="Deutsch"
    # PROG_TITLE=
    INPUT_PROMPT="Geben Sie einen der obigen Ortsnamen ein:"
    WRONG_INPUT_MSG="FALSCHE EINGABE: Dieser Ort steht nicht zur Wahl!"
    ANSWER_START="Uhrzeit in"
    FIELD_SEPARATOR=":"
else
    UILANG="English"
    # PROG_TITLE=
    INPUT_PROMPT="Write one of those names for selection:"
    WRONG_INPUT_MSG="WRONG INPUT: This name is not a valid choice!"
    ANSWER_START="Current time in"
    FIELD_SEPARATOR="/"
fi


function hilfe_seite {  # German help page.
cat << _EOT_

 $PROG_NAME (Version $PROG_VERSION) - Ortzeit ausgewählter Orte anzeigen

 AUFRUFPARAMETER / OPTIONEN
    --list|-l		 Die Zeitzonenliste anzeigen
    --edit|-e		 Die Zeitzonenliste bearbeiten
    --hilf		 Diese Hilfe anzeigen
    --version		 Versionsinfo anzeigen
    -#			 Die Versionsnummer ausgeben.

 AUFRUFBEISPIELE

  $SCRIPT_NAME

      Zeigt eine Liste von Ortsnamen an, aus denen man einen Namen
      auswählten kann, um die zugehörige aktuelle Ortszeit anzeigen
      zu lassen.

  $SCRIPT_NAME new york

      Zeigt die aktuelle Ortszeit von New York an.

 Kodiert von Bernd Storck, facebook.com/BStLinux/
 (GNU/General Public License version 2.0)

_EOT_
}


function help_page {
cat << _EOT_

 $PROG_NAME (Version $PROG_VERSION) - Show local time of a foreign town

 OPTIONS

  --list|-l		 Show the list of time zones.
  --edit|-e		 Edit the lsit of time zones.
  --help|-h		 Display this help page.
  --version		 Show program name and version number.
  -#			 Print the version number.

 EXAMPLES

  $SCRIPT_NAME

      Shows a list of town names, from which you can chose one to see
      the local time of this town.

  $SCRIPT_NAME new york

      Shows the current time of New York.

 Coded by Bernd Storck, facebook.com/BStLinux/
 (GNU/General Public License version 2.0)

_EOT_
}

function list_available {
# Parses the file $ZONES_FILE, which is a small list or database file
# with key-value-pairs like "New York:America/New_York".
#
# This function writes to screen all available and valid key values,
# which are by default german town names. This enables the user to
# select a town whose time zone notation is known by the script.
#
    echo
    if [ "$UILANG" = "Deutsch" ]; then
        sed -E 's/^(.*):.*$/"\1"/' "$ZONES_FILE" |\
    sort | tr '\n' ' ' | reformat -l 1
    else
        sed -E -e 's|^.*:.*/(.*)$|"\1"|' -e 's/_/ /g' "$ZONES_FILE" |\
    sort | uniq | tr '\n' ' ' | reformat -l 1
    fi
    echo
}

function capitalize {
# Provides the case independence of user input. The user can write a
# key value aka town name regardless of upper or lower case.
#
# This function will transform an user input to one word or multiple
# words with each word beginning with a capital letter followed by lower
# case letters.
#
# It might give simpler, shorter ways to code it than used in this
# version of the script.

    words="$(sed -E 's:-:@ :g' <<< "$*")"    ### Masking hyphens and splitting at hyphen in multiple words.
    for i in $words
    do
        first_letter="${i:0:1}"
        first_letter="${first_letter^^}"  # to upper case
        word_tail="${i:1}"
        ort+="${first_letter}${word_tail,,} "  # Includes to lower case for word_tail.
        shift
    done
    ort="$(sed -E 's:@ :-:g' <<< "$ort")"    ### Demasking hyphens.
    ort="${ort:0:-1}"  # Remove pending last space.
    english_key="$(sed -E 's/ /_/' <<< "$ort")"
}

function exists_key {
# Checks for all supported languages whether the key aka town name is in
# the database file "$ZONES_FILE".
    [ "$UILANG" = "Deutsch" ] && key="${ort}:" || key="/${english_key}"
    if grep -Fq "$key" $ZONES_FILE; then
        return 0
    else
        return 1
    fi
}

if [ "$#" = "0" ]; then  # Menu mode, if the user has not given a town name at script call.
    clear
    list_available
    read -rp " $INPUT_PROMPT " eins zwei

    capitalize "$eins" "$zwei"
    unset eins zwei
    if ! exists_key; then
        echo -e "\n $WRONG_INPUT_MSG\n"
        sleep 2
        exit 1
    fi
else
    case "$1" in
        --list|-l|-list)
            less "$ZONES_FILE"
            exit 0
            ;;
        --edit|-e|-edit)
            "$EDITOR" "$ZONES_FILE"
            exit 0
            ;;
        --hilf|--hilfe|-hilf)  # Calls German help regardless of system settings for language.
            hilfe_seite
            exit 0
            ;;
        --help|-h|-help)
            if [ "$UILANG" == "Deutsch" ]; then
                hilfe_seite
            else
                help_page
            fi
            exit 0
            ;;
        --version|-\#)   # For possible bug reports.
            if [ "$1" = "--version" ]; then
                echo -n "$PROG_NAME "
            fi
            echo "$PROG_VERSION"
            exit 0
            ;;
        *)
            capitalize "$@"
            if ! exists_key; then   # Recursive call, if the
                "$0"                # parameters from call are
                exit 1              # not matching a know key
            fi                      # value. Starts in menu mode.
    esac
fi

zone="$(grep -Ei "$key" $ZONES_FILE | cut -d"$FIELD_SEPARATOR" -f2)"
echo -e "\n $ANSWER_START ${ort}: $(eval "TZ=\"$zone\" date")\n"

exit 0
